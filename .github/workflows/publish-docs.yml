name: lf-api-client-core-dotnet-CI

on:
  push:
    branches: [ '\d+.x' ]
  pull_request:
    branches: [ '\d+.x' ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  VERSION_PREFIX: "1.0.1"

jobs:
  build-n-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Run unit tests
      run: dotnet test --no-build --verbosity normal --filter Laserfiche.Api.Client.UnitTest
    - name: Run integration tests
      env:
        DEV_CA_PUBLIC_USE_INTEGRATION_TEST_ACCESS_KEY: ${{ secrets.DEV_CA_PUBLIC_USE_INTEGRATION_TEST_ACCESS_KEY }}
        DEV_CA_PUBLIC_USE_TESTOAUTHSERVICEPRINCIPAL_SERVICE_PRINCIPAL_KEY:  ${{ secrets.DEV_CA_PUBLIC_USE_TESTOAUTHSERVICEPRINCIPAL_SERVICE_PRINCIPAL_KEY }}
      run:
        dotnet test --no-build --verbosity normal --filter Laserfiche.Api.Client.IntegrationTest

  build-documentation:
    runs-on: ubuntu-latest
    needs: [ build-n-test ] # wait for build to finish
    steps:
    - uses: actions/checkout@v3
    - name: Install doxygen
      run: sudo apt-get install doxygen
    - name: Check doxygen version
      run: doxygen --version
    - name: Create temporary directory
      run: mkdir -p ./docs_temp/${{ github.ref_name }}
    - name: Generate doxygen config
      run: doxygen -g doxygen.conf
    - name: Rewrite doxygen config
      run: |
        sed -i 's|"My Project"|${{ github.event.repository.name }}|i' doxygen.conf
        sed -i 's|PROJECT_BRIEF          =|PROJECT_BRIEF          = ".NET implementation of various OAuth 2.0 flows for secure and easy access to Laserfiche APIs."|i' doxygen.conf
        sed -i 's|PROJECT_LOGO           =|PROJECT_LOGO           = logo.png|i' doxygen.conf
        sed -i "s|OUTPUT_DIRECTORY       =|OUTPUT_DIRECTORY       = ./docs_temp/${{ github.ref_name }}/|i" doxygen.conf
        sed -i 's|RECURSIVE              = NO|RECURSIVE              = YES|i' doxygen.conf
        sed -i 's|GENERATE_LATEX         = YES|GENERATE_LATEX         = NO|i' doxygen.conf
    - name: Dump doxygen.conf to check rewrite
      run: head -n 200 doxygen.conf
    - name: Generate doxygen docs
      run: doxygen doxygen.conf
    - name: Print folder content
      run: ls ${{ github.workspace }}/docs_temp/${{ github.ref_name }}/html
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: documentation-artifact
        path: ${{ github.workspace }}/docs_temp/${{ github.ref_name }}/html
    - name: Delete temporary directory
      run: rm -r ./docs_temp
    - name: Delete doxygen config
      run: rm -f doxygen.conf

  publish-documentation:
    runs-on: ubuntu-latest
    if: ${{ github.run_attempt != 1 }}
    needs: [ build-n-test, build-documentation ] # wait for build to finish
    steps:
    - name: Create temporary directory
      run: mkdir -p ./docs_temp/${{ github.ref_name }}/html/
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        name: documentation-artifact
        path: ${{ github.workspace }}/docs_temp/${{ github.ref_name }}/html/
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2 # Use your bucket region here
    - name: Upload docs to S3 bucket
      run: aws s3 sync ./docs_temp/${{ github.ref_name }}/html/ s3://apiserver-publish-client-library-docs/${{ github.event.repository.name }}/docs/${{ github.ref_name }} --delete
    - name: Delete temporary directory
      run: rm -r ./docs_temp/${{ github.ref_name }}/html/

  publish-preview:
    runs-on: ubuntu-latest
    environment: preview
    if: ${{ github.run_attempt != 1 }}
    needs: [ build-n-test, build-documentation ] # wait for build to finish
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration release
    - name: set PACKAGE_VERSION environment
      run: echo "PACKAGE_VERSION=${{ env.VERSION_PREFIX }}-beta-${{ github.run_id }}" >> $GITHUB_ENV
    - name: Packaging
      run: dotnet pack --no-build --configuration release /p:version=${{ env.PACKAGE_VERSION }}
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: package-preview-artifact
        path: ${{ github.workspace }}/src/bin/Release/*.nupkg

    #- name: Publish to Nuget.org
    #  run: dotnet nuget push ./src/bin/Release/*.nupkg --api-key ${{secrets.NUGET_KEY}} --source https://api.nuget.org/v3/index.json
    - name: Tag commit
      uses: rickstaa/action-create-tag@v1
      with:
        tag: ${{ env.PACKAGE_VERSION }}
        commit_sha: ${{ github.sha }}
        message: Workflow run ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  publish-production:
    runs-on: ubuntu-latest
    environment: production
    if: ${{ github.run_attempt != 1 }}
    needs: [ build-n-test, build-documentation ] # wait for build to finish
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration release
    - name: set PACKAGE_VERSION environment
      run: echo "PACKAGE_VERSION=${{ env.VERSION_PREFIX }}" >> $GITHUB_ENV
    - name: Packaging
      run: dotnet pack --no-build --configuration release /p:version=${{ env.PACKAGE_VERSION }}
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: package-production-artifact
        path: ${{ github.workspace }}/src/bin/Release/*.nupkg

    #- name: Publish to Nuget.org
    #  run: dotnet nuget push ./src/bin/Release/*.nupkg --api-key ${{secrets.NUGET_KEY}} --source https://api.nuget.org/v3/index.json
    - name: Tag commit
      uses: rickstaa/action-create-tag@v1
      with:
        tag: ${{ env.PACKAGE_VERSION }}
        commit_sha: ${{ github.sha }}
        message: Workflow run ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
