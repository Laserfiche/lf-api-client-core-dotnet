name: lf-api-client-core-dotnet-CI

on:
  push:
    branches: [ '\d+.x' ]
  pull_request:
    branches: [ '\d+.x' ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  VERSION_PREFIX: '1.3.3'
  GITHUB_PAGES_BRANCH: 'gh-pages'

jobs:
  build-n-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Run unit tests
      run: dotnet test tests/unit/Laserfiche.Api.Client.UnitTest.csproj --no-build --verbosity normal --logger "trx;LogFileName=unit-test-results.trx"

    - name: Run integration tests
      id: cloud-integration-test
      env:
        ACCESS_KEY: ${{ secrets.DEV_CA_PUBLIC_USE_INTEGRATION_TEST_ACCESS_KEY }}
        SERVICE_PRINCIPAL_KEY:  ${{ secrets.DEV_CA_PUBLIC_USE_TESTOAUTHSERVICEPRINCIPAL_SERVICE_PRINCIPAL_KEY }}
      run:
        dotnet test tests/integration/Laserfiche.Api.Client.IntegrationTest.csproj --no-build --verbosity normal --logger "trx;LogFileName=integration-test-results.trx" --filter TestCategory=Cloud

    - name: Run integration tests on API Server
      if: always() && (steps.cloud-integration-test.outcome == 'success' || steps.cloud-integration-test.outcome == 'failure')
      env:
        REPOSITORY_ID: ${{ secrets.APISERVER_REPOSITORY_ID }}
        APISERVER_USERNAME:  ${{ secrets.APISERVER_USERNAME }}
        APISERVER_PASSWORD:  ${{ secrets.APISERVER_PASSWORD }}
        APISERVER_REPOSITORY_API_BASE_URL:  ${{ secrets.APISERVER_REPOSITORY_API_BASE_URL }}
        ACCESS_KEY: ${{ secrets.DEV_CA_PUBLIC_USE_INTEGRATION_TEST_ACCESS_KEY }}
      run:
        dotnet test tests/integration/Laserfiche.Api.Client.IntegrationTest.csproj --no-build --verbosity normal --logger "trx;LogFileName=integration-test-self-hosted-results.trx" --filter TestCategory=APIServer

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: Test Results
        path: '**/*.trx'
        reporter: dotnet-trx
        only-summary: 'false'
        list-tests: 'failed'
        fail-on-error: 'false'

  build-documentation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [ build-n-test ] # wait for build to finish
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get install doxygen
        sudo apt-get install graphviz

    - name: Check dependency versions
      run: |
        doxygen --version
        dot -V

    - name: Create temporary directory
      run: mkdir -p ./generated_documentation/

    - name: Rewrite doxygen config
      run: |
        sed -i 's|PROJECT_NUMBER         = version|PROJECT_NUMBER         = ${{ env.VERSION_PREFIX }}|i' ./doxygen/doxygen.conf

    - name: Dump doxygen.conf to check rewrite
      run: head -n 200 ./doxygen/doxygen.conf

    - name: Generate doxygen docs
      run: doxygen ./doxygen/doxygen.conf

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: documentation-artifact
        path: ${{ github.workspace }}/generated_documentation/html

    - name: Delete temporary directory
      run: rm -r ./generated_documentation


  publish-preview-package:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ github.run_attempt != 1 }}
    needs: [ build-n-test, build-documentation ] # wait for build to finish
    steps:
    - name: echo
      run: echo hi


  publish-production-package:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production
    if: ${{ github.run_attempt != 1 }}
    needs: [ build-n-test, build-documentation ] # wait for build to finish
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration release

    - name: set PACKAGE_VERSION environment
      run: echo "PACKAGE_VERSION=${{ env.VERSION_PREFIX }}" >> $GITHUB_ENV

    - name: Packaging
      run: dotnet pack --no-build --configuration release /p:version=${{ env.PACKAGE_VERSION }}

    - name: Publish to Nuget.org
      run: dotnet nuget push ./src/bin/Release/*.nupkg --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json

    - name: Tag commit
      uses: rickstaa/action-create-tag@v1
      with:
        tag: ${{ env.PACKAGE_VERSION }}
        commit_sha: ${{ github.sha }}
        message: Workflow run ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}


  publish-documentation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: github-pages
    needs: [ publish-preview-package ]
    steps:
    - name: Set DOCUMENTATION_VERSION environment variable
      run: |
        if [[ '${{ github.event_name }}' == 'pull_request' ]]; then
          echo 'DOCUMENTATION_VERSION=${{ github.base_ref }}' >> $GITHUB_ENV
        elif [[ '${{ github.ref_protected }}' == 'true' && '${{ github.ref_type }}' == 'branch' ]]; then
          echo 'DOCUMENTATION_VERSION=${{ github.ref_name }}' >> $GITHUB_ENV
        else
          echo 'Unable to publish documentation for the current branch.'
          exit 1
        fi

    - name: Print DOCUMENTATION_VERSION environment variable
      run: |
        echo 'Publishing documentation to ${{ env.GITHUB_PAGES_BRANCH }} for ${{ env.DOCUMENTATION_VERSION }}.'

    - uses: actions/checkout@v3
      with:
        ref: ${{ env.GITHUB_PAGES_BRANCH }}

    - name: Delete documentation directory
      run: rm -f -r ./docs/${{ env.DOCUMENTATION_VERSION }}

    - name: Create documentation directory
      run: mkdir -p ./docs/${{ env.DOCUMENTATION_VERSION }}

    - name: Download documentation build artifact
      uses: actions/download-artifact@v3.0.0
      with:
        name: documentation-artifact
        path: ./docs/${{ env.DOCUMENTATION_VERSION }}

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4.2.3
      with:
        branch: ${{ env.GITHUB_PAGES_BRANCH }}-${{ env.DOCUMENTATION_VERSION }}-patch
        delete-branch: true
        title: "Automated documentation update for ${{ env.DOCUMENTATION_VERSION }} by action ${{ github.run_id }}"
        commit-message: "Automated documentation update for ${{ env.DOCUMENTATION_VERSION }} by action ${{ github.run_id }}"
        body: "Automated documentation update for ${{ env.DOCUMENTATION_VERSION }} by action ${{ github.run_id }}"
        assignees: ${{ github.actor }}
